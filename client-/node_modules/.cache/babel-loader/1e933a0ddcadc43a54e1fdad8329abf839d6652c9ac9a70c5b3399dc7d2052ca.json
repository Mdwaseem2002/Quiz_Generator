{"ast":null,"code":"export default {\n  data() {\n    return {\n      numQuestions: null,\n      topic: '',\n      difficulty: 'easy',\n      loading: false,\n      error: '',\n      generatedQuestions: []\n    };\n  },\n  methods: {\n    generateQuestions() {\n      this.loading = true;\n      // Make API call to Flask server to generate questions\n      fetch('/generate_questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          numQuestions: this.numQuestions,\n          topic: this.topic,\n          difficulty: this.difficulty\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to generate questions');\n        }\n        return response.json();\n      }).then(data => {\n        this.generatedQuestions = data.generated_questions;\n      }).catch(error => {\n        this.error = error.message;\n      }).finally(() => {\n        this.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","numQuestions","topic","difficulty","loading","error","generatedQuestions","methods","generateQuestions","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","generated_questions","catch","message","finally"],"sources":["/home/waseem/project/quiz_generator/client-/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Generate Questions</h1>\n    <form @submit.prevent=\"generateQuestions\">\n      <div class=\"form-group\">\n        <label for=\"numQuestions\">Number of Questions:</label>\n        <input type=\"number\" id=\"numQuestions\" v-model=\"numQuestions\" required>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"topic\">Topic:</label>\n        <input type=\"text\" id=\"topic\" v-model=\"topic\" required>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"difficulty\">Difficulty Level:</label>\n        <select id=\"difficulty\" v-model=\"difficulty\" required>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </div>\n\n      <button type=\"submit\">Generate Questions</button>\n    </form>\n\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n    <div v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <div v-else>\n        <div v-for=\"(question, index) in generatedQuestions\" :key=\"index\" class=\"question\">\n          <h3>Question {{ index + 1 }}</h3>\n          <div class=\"query\">{{ question.query }}</div>\n          <ul class=\"choices\">\n            <li v-for=\"(choice, idx) in question.choices\" :key=\"idx\">{{ choice }}</li>\n          </ul>\n          <p>Answer: {{ question.answer }}</p>\n          <p>Explanation: {{ question.explanation }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      numQuestions: null,\n      topic: '',\n      difficulty: 'easy',\n      loading: false,\n      error: '',\n      generatedQuestions: []\n    };\n  },\n  methods: {\n    generateQuestions() {\n      this.loading = true;\n      // Make API call to Flask server to generate questions\n      fetch('/generate_questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          numQuestions: this.numQuestions,\n          topic: this.topic,\n          difficulty: this.difficulty\n        })\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to generate questions');\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.generatedQuestions = data.generated_questions;\n      })\n      .catch(error => {\n        this.error = error.message;\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n}\n\n.loading {\n  margin-top: 20px;\n  font-style: italic;\n}\n\n.error {\n  color: red;\n  font-weight: bold;\n}\n\n.question {\n  margin-top: 20px;\n}\n\n.query {\n  font-weight: bold;\n}\n\n.choices {\n  list-style-type: none;\n  padding: 0;\n}\n\n.choices li {\n  margin-bottom: 5px;\n}\n</style>\n"],"mappings":"AA6CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,IAAI;MAClBC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,MAAM;MAClBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,EAAE;MACTC,kBAAkB,EAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACJ,OAAM,GAAI,IAAI;MACnB;MACAK,KAAK,CAAC,qBAAqB,EAAE;QAC3BC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBb,YAAY,EAAE,IAAI,CAACA,YAAY;UAC/BC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,UAAU,EAAE,IAAI,CAACA;QACnB,CAAC;MACH,CAAC,EACAY,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,EACAJ,IAAI,CAACf,IAAG,IAAK;QACZ,IAAI,CAACM,kBAAiB,GAAIN,IAAI,CAACoB,mBAAmB;MACpD,CAAC,EACAC,KAAK,CAAChB,KAAI,IAAK;QACd,IAAI,CAACA,KAAI,GAAIA,KAAK,CAACiB,OAAO;MAC5B,CAAC,EACAC,OAAO,CAAC,MAAM;QACb,IAAI,CAACnB,OAAM,GAAI,KAAK;MACtB,CAAC,CAAC;IACJ;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}